<!DOCTYPE html>
<html>
<%
function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}
%>
<head>
    <title>Pick List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        @page {
            size: A4;
            margin: 10mm;
        }

        body {
            font-size: 10px;
            line-height: 1.2;
        }

        .document-header {
            border-bottom: 2px solid #000;
            margin-bottom: 20px;
            font-weight: 800;
        }

        .company-title {
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
        }

        .header-info {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 15px;
        }

        .header-item {
            display: flex;
            justify-content: space-between;
            padding: 3px 0;
        }

        .header-label {
            font-weight: bold;
            width: 100px;
        }

        .header-value {
            flex: 1;
        }

        .table th {
            background-color: #f8f9fa;
            font-weight: bold;
            text-align: left;
            padding: 8px;
        }

        .table td {
            padding: 6px 8px;
            vertical-align: middle;
        }

        .group-row {
            background-color: #f8f9fa !important;
            font-weight: 700;
        }

        .totals-section {
            margin-top: 10px;
            border-top: 1px solid #000;
        }

        .signatures {
            margin-top: 50px;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }

        .signature-line {
            border-top: 1px solid #000;
            padding-top: 5px;
            text-align: center;
        }

        .main-table {
            margin-top: 20px;
        }

        @media print {
            thead {
                display: table-group-column;
            }

            .document-header {
                margin-bottom: 20px;
            }
        }
        @media screen {
            .print-header {
                display: none;
            }
        }


    </style>
</head>
<body>
    <div class="document-header">
        <div class="company-title">PICK LIST</div>
        <div class="header-info">
            <div class="header-item">
                <span class="header-label">Date:</span>
                <span class="header-value"><%= formatDate(data[0].Date) %></span>
            </div>
            <div class="header-item">
                <span class="header-label">Sales Order No:</span>
                <span class="header-value"><%= data[0].sVoucherNo %></span>
            </div>
            <div class="header-item">
                <span class="header-label">Customer:</span>
                <span class="header-value"><%= data[0].CustomerName %></span>
            </div>
            <div class="header-item">
                <span class="header-label">Gross Weight:</span>
                <span class="header-value"><%= data.reduce((sum, row) => sum + Number(row.GrossWeight || 0), 0).toFixed(2) %></span>
            </div>
            <div class="header-item">
                <span class="header-label">Shipping Mark:</span>
                <span class="header-value"><%= data[0].NewShippingMark %></span>
            </div>
            <div class="header-item">
                <span class="header-label">Gross CBM:</span>
                <span class="header-value">
                    <%= data.reduce((sum, row) => sum + (Number(row.ActualQty || 0) * Number(row.CBM || 0)), 0).toFixed(3) %>
                </span>
            </div>
        </div>
    </div>

    <div class="main-table">
        <%
        function getGroupName(productName) {
        return productName.split(') ')[0] + ')';
        }

        let groupCounter = 1;
        let lineCounter = 0;
        const linesPerPage = 25;
        let pageCounter = 1;

        let groupedData = {};
        data.forEach(row => {
        let groupName = getGroupName(row.ProductName);
        if (!groupedData[groupName]) {
        groupedData[groupName] = [];
        }
        groupedData[groupName].push(row);
        });
        %>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th width="5%">S.No.</th>
                    <th width="5%">Code</th>
                    <th width="40%">Product Name</th>
                    <th width="5%">Actual</th>
                    <th width="5%">Repack</th>
                    <th width="10%">Bin</th>
                    <th width="20%">Batch</th>
                    <th width="10%">Remarks</th>
                </tr>
            </thead>
            <tbody>
                <% Object.keys(groupedData).forEach(groupName => { %>
                <% if(lineCounter >= linesPerPage) { %>
            </tbody>
        </table>
        <table class="table table-bordered">
            <thead class="print-header">
                <tr>
                    <th width="5%">S.No.</th>
                    <th width="5%">Code</th>
                    <th width="40%">Product Name</th>
                    <th width="5%">Actual</th>
                    <th width="5%">Repack</th>
                    <th width="10%">Bin</th>
                    <th width="20%">Batch</th>
                    <th width="10%">Remarks</th>
                </tr>
            </thead>
            <tbody>
                <% lineCounter = 0; pageCounter++; %>
                <% } %>

                <tr class="group-row">
                    <td width="5%"><%= groupCounter %></td>
                    <td colspan="2"><%= groupName %></td>
                    <td width="5%" class="text-end"><%= groupedData[groupName].reduce((sum, row) => sum + Number(row.ActualQty), 0).toFixed(2) %></td>
                    <td width="5%" class="text-end"><%= groupedData[groupName].reduce((sum, row) => sum + Number(row.RepackQty), 0).toFixed(2) %></td>
                    <!-- Add CBM calculation -->
                    <td colspan="2" class="text-end">
                        GW: <%= groupedData[groupName].reduce((sum, row) => sum + Number(row.GrossWeight || 0), 0).toFixed(2) %> |
                        CBM: <%= groupedData[groupName].reduce((sum, row) => sum + (Number(row.ActualQty || 0) * Number(row.CBM || 0)), 0).toFixed(3) %>
                    </td>
                    <td></td>
                </tr>
                <% lineCounter++; %>

                <% groupedData[groupName].forEach((row, index) => { %>
                <tr>
                    <td width="5%"><%= index + 1 %></td>
                    <td width="5%"><%= row.ProductCode %></td>
                    <td width="40%">
                        <%= row.ProductName %>
                        <% if(row.AdditionalDescription) { %>
                        -- [[<%= row.AdditionalDescription %>]]
                        <% } %>
                    </td>
                    <td width="5%" class="text-end"><%= row.ActualQty %></td>
                    <td width="5%" class="text-end"><%= row.RepackQty %></td>
                    <td width="10%"><%= row.BinName %></td>
                    <td width="20%"><%= row.BatchNo %></td>
                    <td width="10%">
                        <% if(row.ActualQty !== row.RepackQty) { %>
                        (1X<%= row.PackingProduct %>X<%= Math.round(row.ActualQty/row.RepackQty) %>)
                        <% } %>
                    </td>
                </tr>
                <% lineCounter++; %>
                <% }); %>
                <% groupCounter++; %>
                <% }); %>
            </tbody>
        </table>

        <div class="totals-section">
            <table class="table table-bordered">
                <tr class="fw-bold">
                    <td width="60%">Grand Total</td>
                    <td width="20%" class="text-end">
                        <%= Object.values(groupedData).flat().reduce((sum, row) => sum + Number(row.ActualQty), 0).toFixed(2) %>
                    </td>
                    <td width="20%" class="text-end">
                        <%= Object.values(groupedData).flat().reduce((sum, row) => sum + Number(row.RepackQty), 0).toFixed(2) %>
                    </td>
                </tr>
            </table>
        </div>

        <div class="signatures">
            <div class="signature-line">Prepared By</div>
            <div class="signature-line">Checked By</div>
            <div class="signature-line">Approved By</div>
        </div>
    </div>
</body>
</html>
